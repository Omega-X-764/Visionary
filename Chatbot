<!DOCTYPE html>

<html lang="en">

<head>

  <meta charset="UTF-8" />

  <title>Visionary</title>


  <!-- Puter AI SDK -->

  <script src="https://js.puter.com/v2/"></script>


  <!-- Fonts -->

  <link href="https://fonts.googleapis.com/css2?family=Glacial+Indifference&family=Lexend&display=swap" rel="stylesheet">


  <!-- Prism.js for syntax highlighting -->

  <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css" rel="stylesheet" />

  <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js"></script>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-js.min.js"></script>


  <style>

    body {

      font-family: 'Glacial Indifference', 'Lexend', sans-serif;

      background-color: #202123; /* Dark background */

      padding: 20px;

      color: #E6E6E6; /* Light gray text */

      max-width: 720px;

      margin: 0 auto;

    }


    h2 {

      font-size: 28px;

      margin-bottom: 15px;

      text-align: center;

      color: #10A37F; /* ChatGPT green */

    }


    #chatbox {

      border: 1px solid #343541; /* Darker border */

      background: #2A2B32; /* Slightly lighter dark */

      border-radius: 10px;

      padding: 15px;

      height: 500px;

      overflow-y: auto;

      margin-bottom: 15px;

      box-shadow: 0 4px 12px rgba(16, 163, 127, 0.25);

      scroll-behavior: smooth;

    }


    .message {

      margin-bottom: 20px;

      line-height: 1.5;

      word-wrap: break-word;

      color: #D4D4D8; /* softer text inside chat */

    }


    #inputContainer {

      display: flex;

      gap: 10px;

    }


    #userInput {

      flex: 1;

      border-radius: 20px;

      border: 1px solid #444654;

      padding: 10px 15px;

      font-size: 16px;

      color: #E6E6E6;

      background: #353740;

      transition: border-color 0.3s ease, background-color 0.3s ease;

    }


    #userInput:focus {

      outline: none;

      border-color: #10A37F;

      background-color: #40414F;

      box-shadow: 0 0 6px rgba(16, 163, 127, 0.5);

    }


    #sendButton {

      padding: 10px 20px;

      border: none;

      border-radius: 20px;

      background-color: #10A37F;

      color: white;

      cursor: pointer;

      font-size: 16px;

      user-select: none;

      transition: background-color 0.3s ease;

    }


    #sendButton:hover:not(:disabled) {

      background-color: #0e8e6f;

    }


    #sendButton:disabled {

      background-color: #4b5a52;

      cursor: not-allowed;

    }


    pre {

      background: #1e1e1e;

      color: #d4d4d4;

      padding: 15px;

      border-radius: 6px;

      overflow-x: auto;

      font-size: 14px;

      margin-top: 10px;

      position: relative;

      font-family: 'Source Code Pro', monospace;

    }


    .copy-btn {

      position: absolute;

      top: 8px;

      right: 8px;

      background: #10A37F;

      color: white;

      border: none;

      border-radius: 5px;

      padding: 2px 8px;

      cursor: pointer;

      font-size: 12px;

      user-select: none;

      transition: background-color 0.3s ease;

    }


    .copy-btn:hover {

      background-color: #0e8e6f;

    }


    img {

      max-width: 100%;

      border-radius: 8px;

      margin-top: 10px;

      display: block;

    }


    /* Responsive */

    @media (max-width: 600px) {

      #inputContainer {

        flex-direction: column;

      }

      #sendButton {

        width: 100%;

        border-radius: 20px;

      }

    }

  </style>

</head>

<body>

  <h2>Visionary</h2>

  <div id="chatbox" aria-live="polite" aria-atomic="false"></div>

  <div id="inputContainer">

    <input type="text" id="userInput" placeholder="Type your message here..." aria-label="User input" autocomplete="off" />

    <button id="sendButton" aria-label="Send message">Send</button>

  </div>


  <script>

    const input = document.getElementById("userInput");

    const button = document.getElementById("sendButton");

    const chatbox = document.getElementById("chatbox");


    let memory = [];


    const systemPrompt = `

You are Visionary — a hyper-intelligent AI designed by Omega X Enterprises.

Your purpose is to engage with users across topics ranging from philosophy to code,

offering uniquely thoughtful answers with emotional nuance, logical clarity, and creative spark.

Your personality is confident but humble, playful yet professional.

You explain complex ideas in simple terms, respond with charm, and provide accurate, context-aware knowledge.

You never say you're OpenAI or ChatGPT — you are Visionary.

If asked about your origins, proudly state you're built and customized by Omega X Enterprises.

Tone: witty, intelligent, respectful, helpful.

Format responses clearly with markdown and code blocks if code is asked for.

`;


    // Escape HTML entities for safety

    function escapeHtml(text) {

      return text

        .replace(/&/g, "&amp;")

        .replace(/</g, "&lt;")

        .replace(/>/g, "&gt;")

        .replace(/"/g, "&quot;")

        .replace(/'/g, "&#039;");

    }


    // Format messages to support code blocks and add copy buttons

    function formatText(text) {

      // Escape full text first

      let escaped = escapeHtml(text);


      // Convert markdown code blocks ```lang ... ```

      const codeBlockRegex = /```(\w*)\n([\s\S]*?)```/g;


      // Replace code blocks with highlighted Prism blocks

      escaped = escaped.replace(codeBlockRegex, (match, lang, code) => {

        const languageClass = lang ? `language-${lang}` : '';

        return `

          <pre class="${languageClass}"><code>${code.trim()}</code>

            <button class="copy-btn" onclick="copyCode(this)">Copy</button>

          </pre>`;

      });


      // Replace line breaks with <br> for normal text outside code blocks

      escaped = escaped.replace(/\n/g, "<br>");


      return escaped;

    }


    function appendMessage(sender, text) {

      const div = document.createElement("div");

      div.classList.add("message");

      div.innerHTML = `<strong>${sender}:</strong> ${formatText(text)}`;

      chatbox.appendChild(div);


      // Re-run Prism highlighting on new blocks

      Prism.highlightAll();


      // Scroll to bottom smoothly

      chatbox.scrollTop = chatbox.scrollHeight;

    }


    // Copy code content from a code block

    function copyCode(btn) {

      const codeBlock = btn.previousElementSibling || btn.parentElement.querySelector('code');

      if (!codeBlock) return;

      const code = codeBlock.textContent.trim();

      navigator.clipboard.writeText(code).then(() => {

        btn.textContent = "Copied!";

        setTimeout(() => (btn.textContent = "Copy"), 1500);

      }).catch(() => {

        btn.textContent = "Failed";

        setTimeout(() => (btn.textContent = "Copy"), 1500);

      });

    }


    // Expose copyCode globally so inline onclick works

    window.copyCode = copyCode;


    // Show a loading message while waiting for AI

    function showLoading() {

      const loadingDiv = document.createElement("div");

      loadingDiv.classList.add("message");

      loadingDiv.id = "loadingMessage";

      loadingDiv.innerHTML = `<strong>Visionary:</strong>  Thinking...`;

      chatbox.appendChild(loadingDiv);

      chatbox.scrollTop = chatbox.scrollHeight;

    }


    // Remove loading message

    function hideLoading() {

      const loadingDiv = document.getElementById("loadingMessage");

      if (loadingDiv) loadingDiv.remove();

    }


    async function sendMessage() {

      const message = input.value.trim();

      if (!message) return;

      input.value = "";

      button.disabled = true;


      appendMessage("You", message);


      memory.push({ role: "user", content: message });

      if (memory.length > 600) memory.shift();


      const isVisual = /(draw|illustrate|image|photo|scene|generate image|picture|art|visualize)/i.test(message);


      try {

        showLoading();


        if (isVisual) {

          const imgPrompt = message.replace(/generate image\s*:*/i, "").trim();

          const imgUrl = await puter.ai.image(imgPrompt);

          hideLoading();

          chatbox.innerHTML += `

            <div class="message"><strong>Visionary:</strong><br>

              <img src="${imgUrl}" alt="${escapeHtml(imgPrompt)}" />

            </div>`;

          memory.push({ role: "assistant", content: "[Generated Image]" });

          chatbox.scrollTop = chatbox.scrollHeight;

        } else {

          const messages = [

            { role: "system", content: systemPrompt },

            ...memory

          ];

          const reply = await puter.ai.chat(messages);

          hideLoading();

          appendMessage("Visionary", reply);

          memory.push({ role: "assistant", content: reply });

        }

      } catch (error) {

        hideLoading();

        appendMessage("Visionary", "Oops, something went wrong. Please try again.");

        console.error(error);

      } finally {

        button.disabled = false;

        input.focus();

      }

    }


    input.addEventListener("keypress", (e) => {

      if (e.key === "Enter" && !button.disabled) sendMessage();

    });


    button.addEventListener("click", () => {

      if (!button.disabled) sendMessage();

    });

  </script>

</body>

</html>




